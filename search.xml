<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SQL二阶注入例子]]></title>
    <url>%2F2018%2F02%2F26%2FSQL%E4%BA%8C%E9%98%B6%E6%B3%A8%E5%85%A5%E4%BE%8B%E5%AD%90%2F</url>
    <content type="text"><![CDATA[转自freebuf1http://www.freebuf.com/articles/web/162822.html 前言每周我们都能听到或看到许多关于安全漏洞的预警或报告，虽然看上去大多数的漏洞都千篇一律，但对于我们渗透测试人员而言，其中的一些思路方法和利用点却尤为吸引我们的眼球。最近，知名的内容管理系统Joomla！就被曝出了存在二阶SQL注入漏洞。这里有一篇博文的分析大家可以看看：https://blog.ripstech.com/2018/joomla-privilege-escalation-via-sql-injection/ 在本文中， Savan Gadhiya和Amish Patadiya将尝试帮助我们理解并发现二阶SQL注入方法和利用技术。本文还将演示如何使用SQLmap来利用二阶SQL注入（即不要重复造轮子）。 什么是二阶SQL注入？为了预防SQL注入攻击，而将输入到应用程序中的某些数据进行了“转义（escape）”，但是这些数据却又在“未被转义（Unescaped）”的查询窗体中重复使用。此时，攻击者可能注入的是一个PAYLOAD，这样就会构成一个SQL查询语句并被执行，这就是所谓的二阶SQL注入。 了解更多：https://portswigger.net/kb/issues/00100210_sql-injection-second-order 下面，让我们来通过Joomla中二阶SQL注入的例子来更进一步的理解[CVE-2018-6376]。 详情受影响Joomla！版本：&lt;= 3.8.3 and &gt;= 3.7.0 危害：可将低权限用户（Manager）提升为更高的的用户权限（Administrator’或‘ Super Administrator’）。 注入检测现在，我们已经搭建好了一个版本为3.8.3的Joomla！平台用于测试如下图所示：我们创建了具有“Super Users”权限的用户“amish”，以及具有“Manager”权限的另一个用户”savan”，如下所示：我们的目标是将“Manager”权限的用户提升为“Super Administrator”权限。因此现在我们以用户’savan’的身份登录。下图显示了用户’savan’的仪表盘，并 且我们也可以看到Super User’当前也处于登录状态：从漏洞报告中我们知道，受影响的实例是位于配置文件资料更新页中。下图显示了用户’savan’的配置文件更新页面：让我们使用 BURP Suite来拦截配置文件更新请求。如下所示，表单数据的POST请求发向了以下地址：1http://&lt;IP/domain&gt;/joomla/administrator/index.php?option=com_admin&amp;view=profile&amp;layout=edit&amp;id=645 受影响的参数是‘forms[params][admin_style]‘，我们将下面的有效载荷插入到受影响的参数中，如下所示： PAYLOAD: ‘ (单引号)成功提交此请求后，配置文件更新页将显示参考消息“已保存的项目”，如下图所示：以上并没有显示任何异样，因为该页面并没有使用被注入的PAYLOAD构造SQL查询并执行。让我们访问下面的URL，使用注入的有效载荷构造SQL查询，并执行，如下图所示：1http://&lt;IP/domain&gt;/joomla/administrator/index.php 查看源代码我们可以得知，PAYLOAD的插入并不容易实施SQL注入攻击。下图显示了文件’/administrator/components/com_admin/controllers/profile.php’的代码片段，其中突出显示了“编辑配置文件”功能的路径：当用户更新配置文件详细信息时，应用程序将检索所有参数并返回JForm对象，如下图所示：下图显示应用程序将检索到的用户信息存储到数据库中：上面我们已经确认用户输入并未被构造用于SQL查询，因此PAYLOAD插入实例并不容易实施攻击，让我们在受影响的页面来利用它。如下图所示，我们插入以下字符串作为PAYLOAD，以查看SQL语句是如何被构造的： PAYLOAD: test通过仪表盘上显示的错误信息我们可以看到，错误信息中仅显示了PAYLOAD的第一个字符。接着,我们做了进一步的尝试。我们注入了另一个payload‘AND sleep(5);–‘ 并刷新了仪表盘。如下图所示，我们得到了同样的结果：如果此时我们查看数据库，就会发现我们输入的PAYLOAD已被存储在了数据库中：在确认payload被正确存储后，下面让我们来验证受影响的代码是如何构造SQL查询的。受影响的实例来自‘administrator/templates/hathor/postinstall/hathormessage.php’文件。如下图所示，代码的第40行主要是从‘admin_style’参数获取用户的输入值并传递给‘adminstyle’变量。在第47行，代码直接使用用户提供的输入来构建SQL查询。这里我们把它看成是一个数组，因此索引值为0的存储值将被用于构造查询。这也就是为什么在错误信息中，只能看到第一字符的原因。现在我们已经知道了PAYLOAD会被视为一个数组，索引值为0的存储值将被用于构造查询。因此，让我们尝试提供一个数组‘[“test1″,”test2″,”test3”]’作为PAYLOAD。这么做的目的是测试第0个索引（即“test1”）是否会被用于构造SQL查询。但结果还是令我有点失望，错误信息依旧只显示了第一个字符“[”，这意味着程序将整个PAYLOAD视为了一个字符串，如下所示：灵光一现，我们想到了一个方法，即改变参数名提供数组‘admin_style’的第0个索引。如下图所示，我们使用’jform [params] [admin_style] [0]‘更改了参数名称，并将相同的PAYLOAD注入到了’admin_style’的第0个索引中： PAYLOAD: AND sleep(5);–现在我们可以看到，虽然PAYLOAD并没有被执行，但错误消息中已经可以完整显示我们的PAYLOAD内容。我们接着注入以下PAYLOAD来获取目标数据库名称，我们获取到了数据库名称为’joomla’如下图所示： Payload: extractvalue(0x0a,concat(0x0a,(select database())))现在我们来实现我们的终极目标，即以超级管理员的权限访问应用程序。以下PAYLOAD将为我们获取到超级管理员用户“amish”的session id，如下图所示： Payload: extractvalue(0x0a,concat(0x0a,(select * from joomla_session where username=’amish’)))成功获取session id后，我们就可以模拟超级管理员用户访问应用了。 自动化利用当在实际的渗透环境中，我们不可能每次都手动进行测试，这样会消耗我们大量的时间。那么，如何让我们的测试实现自动化呢？ 这里就不得不提sql注入的扫描神器SQLMap了。SQLMap为我们提供了专门针对二阶注入的查询开关，我们只需提供可能存在二阶注入的目标URL地址即可。 注意/限制：由于这是二阶SQL注入，所以我们不能使用多个线程来自动检查每个查询的输出。 如果我们直接将该实例提供给SQLMap，可能无法正常运作。为了解决这个问题，我们需要创建一个sqlmap可以将其PAYLOAD注入并顺利获取数据的查询。我们构造了以下PAYLOAD，作为请求中‘jform[params][admin_style][0]’参数的值，并使用SQLMap ‘-r’开关来解析请求，如下图所示： PAYLOAD: extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 *))) 这里的‘*’代表SQLMap注入PAYLOAD的位置，例如： extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 AND 5231=5231)))extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 AND 5231=1623)))extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 OR 7231=7231)))extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 order by 1 —)))extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 union all select NULL,NULL,NULL,’21231231232′)))如下图所示，SQLMap现在使用以下命令检测注入并提取所有数据库名称： sqlmap -r 1.txt –dbms MySQL –second-order “http:///joomla/administrator/index.php” -D “joomla” –dbs通过Sqlmap我们可以轻松提取到更多的数据。 防护措施为了避免该类漏洞对你的影响，请务必升级你的Joomla！至3.8.5版本（截至本文发布时的最新版本）。Joomla！也提供了代码层的修复方案，如下： *参考来源：notsosecure，FB小编 secist 编译，转载请注明来自FreeBuf.COM]]></content>
  </entry>
  <entry>
    <title><![CDATA[docker搭建centos+Apache+Struts2-045环境]]></title>
    <url>%2F2018%2F01%2F30%2Fdocker%E6%90%AD%E5%BB%BAcentos-Apache-Struts2-045%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[docker搭建centos+Apache+Struts2-045环境安装docker生成容器1234yum install dockerdocker search centosdocker pull centosdocker run -it --name struts2 -p 8088:8080 centos #将容器8080端口映射到主机的8088端口 安装java环境+Apache-tomcat1234567yum install java-1.8.0-openjdkyum install wgetwget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.2/bin/apache-tomcat-9.0.2.tar.gztar xvf apache-tomcat-9.0.2.tar.gzcd apache-tomcat-9.0.2./bin/startup.shcurl localhost:8080 下载存在s2-045漏洞的版本并部署1234567wget http://archive.apache.org/dist/struts/binaries/struts-2.3.12-all.zipyum install unzip zipunzip struts-2.3.12-all.zipcd struts-2.3.12cp /apache-tomcat-9.0.2/struts-2.3.12/apps/struts2-showcase.war /apache-tomcat-9.0.2/webapps/struts22312.war./bin/shutdown.sh./bin/startup.sh 部署成功，PoC测试成功访问1http://127.0.0.1:8088/struts22312/showcase.action 制作镜像12docker commit id st2-045:1.0docker save -o st2-045 st2-045:1.0]]></content>
  </entry>
  <entry>
    <title><![CDATA[更换电脑后移植hexo]]></title>
    <url>%2F2017%2F12%2F12%2F%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E7%A7%BB%E6%A4%8Dhexo%2F</url>
    <content type="text"><![CDATA[更换电脑后移植hexo1. 拷贝原主机上的目录下几个文件或文件夹（无需拷贝全部文件） config.ymlscaffoldspackage.jsonsourcethemes 2.在新电脑上建立hexo文件夹，将上述文件拷贝进来3.新电脑上配置好hexo环境：nodejs,nvm控制版本4.安装hexo，执行命令：npm install -g hexo 5.进入hexo文件夹，执行模块安装命令:1234npm installnpm install hexo-deployer-git --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --save 6.部署执行命令:12hexo ghexo deploy]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[ss安装配置]]></title>
    <url>%2F2017%2F08%2F24%2Fss%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[ss安装与使用操作系统 ubuntu 16.04 安装ss1 需要有python环境和pip2 安装ss1sudo pip install shadowsocks 配置ss服务器ss有两种配置方式，一种是直接命令行配置，另一种是写入文件可以查看ss帮助文档1sslocal -help 1 命令行1sslocal -s 8.8.8.8 -p 8848 -k &quot;your password&quot; -b 127.0.0.1 -l 1080 参数说明：-s : 后面跟服务器ip-p : 服务器端口-k : 密码-b : 本地ip-l : 本地端口 2 配置文件新建.json文件 1touch ssss.json /home/../../ 编辑json文件123456789&#123; &quot;server&quot;:&quot;8.8.8.8&quot;, &quot;server_port&quot;:8848, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpasswd&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; 配置参数信息同上命令行说明 保存配置文件后执行命令1sslocal -c /home/../../ssss.json 配置代理使用1 全局模式即在网络设置中选择网络代理-手动 然后将ip、端口配置好 2 PAC需安装genpac1sudo pip install genpac 运行命令1genpac --proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; -o autoproxy.pac --gfwlist-url=&quot;https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt&quot; 当前目录生成一个pac网络设置中选择网络代理-手动-将上述pac文件目录填入url中-应用到整个系统 ss安装配置完毕]]></content>
  </entry>
  <entry>
    <title><![CDATA[git使用教程]]></title>
    <url>%2F2017%2F08%2F04%2Fgit%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[配置git git config –global user.name “github用户名”git config –global user.email “github邮箱地址” 一、上传到github 建立仓库github上Create a new repository 本地建立目录，与仓库命名一致 cd到目录内 初始化git init 修改本地仓库 例如touch Readmegit add Readmegit commit -m ‘说明文字’git remote add origin https://github.com/github用户名/github仓库.gitgit push origin master 二、clone到本地 git clone https://github.com/github用户名/github仓库名.git 如需修改添加可按如上步骤操作注：有时，在执行git push origin master时，报错：error:failed to push som refs to…….，可执行 git pull origin master]]></content>
  </entry>
  <entry>
    <title><![CDATA[python pyinstaller学习]]></title>
    <url>%2F2017%2F07%2F11%2Fpython-pyinstaller%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[pip安装PyInstaller： pip install pyinstaller 最简单的打包命令pyinstaller projcet.py 外带参数说明：-F 生成单个可执行文件-p 自己定义需加载的类路径-i 后跟图标路径指定图标-w 去掉控制台窗口，在GUI界面使用]]></content>
  </entry>
  <entry>
    <title><![CDATA[HeXo 命令教程]]></title>
    <url>%2F2017%2F04%2F24%2FHeXo%2F</url>
    <content type="text"><![CDATA[部署步骤 每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 常用命令 hexo new”postName” #新建文章 hexo new page”pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Noobxx]]></title>
    <url>%2F2017%2F04%2F21%2FHello-Noobxx%2F</url>
    <content type="text"><![CDATA[Hello Noobxx!Start from zero.]]></content>
  </entry>
</search>
